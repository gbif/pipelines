/**
 * Autogenerated by Avro
 *
 * <p>DO NOT EDIT DIRECTLY
 */
package uk.org.nbn.pipelines.io.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;
import org.apache.beam.sdk.coders.AvroCoder;
import org.apache.beam.sdk.coders.DefaultCoder;
import org.gbif.pipelines.io.avro.Issues;
import org.gbif.pipelines.io.avro.Record;

@DefaultCoder(AvroCoder.class)
@SuppressWarnings("all")
/** ALA Sensitive data information */
@org.apache.avro.specific.AvroGenerated
public class NBNAccessControlledRecord extends org.apache.avro.specific.SpecificRecordBase
    implements org.apache.avro.specific.SpecificRecord, Issues, Record {
  private static final long serialVersionUID = 8763450050751461896L;
  public static final org.apache.avro.Schema SCHEMA$ =
      new org.apache.avro.Schema.Parser()
          .parse(
              "{\"type\":\"record\",\"name\":\"NBNAccessControlledRecord\",\"namespace\":\"uk.org.nbn.pipelines.io.avro\",\"doc\":\"NBN Access Controlled data information\",\"fields\":[{\"name\":\"id\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Pipelines identifier\",\"default\":null},{\"name\":\"created\",\"type\":[\"null\",\"long\"],\"doc\":\"The timestamp the record was created\",\"default\":null},{\"name\":\"accessControlled\",\"type\":[\"null\",\"boolean\"],\"doc\":\"Does this record have any access controlled data features\",\"default\":null},{\"name\":\"dataGeneralizations\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Description of any generalisations that have been applied\",\"default\":null},{\"name\":\"informationWithheld\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Description of any information that has been removed\",\"default\":null},{\"name\":\"publicResolutionInMetres\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"doc\":\"Generalisation to apply in meters\",\"default\":null},{\"name\":\"original\",\"type\":{\"type\":\"map\",\"values\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"avro.java.string\":\"String\"},\"doc\":\"The original values that have been altered\",\"default\":{}},{\"name\":\"altered\",\"type\":{\"type\":\"map\",\"values\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}],\"avro.java.string\":\"String\"},\"doc\":\"Values that have been altered to meet sensitivity requirements\",\"default\":{}},{\"name\":\"issues\",\"type\":{\"type\":\"record\",\"name\":\"org.gbif.pipelines.io.avro.IssueRecord\",\"doc\":\"Issue information\",\"fields\":[{\"name\":\"issueList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"default\":[]}]},\"default\":{}}]}");

  public static org.apache.avro.Schema getClassSchema() {
    return SCHEMA$;
  }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<NBNAccessControlledRecord> ENCODER =
      new BinaryMessageEncoder<NBNAccessControlledRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<NBNAccessControlledRecord> DECODER =
      new BinaryMessageDecoder<NBNAccessControlledRecord>(MODEL$, SCHEMA$);

  /** Return the BinaryMessageDecoder instance used by this class. */
  public static BinaryMessageDecoder<NBNAccessControlledRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link
   * SchemaStore}.
   *
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<NBNAccessControlledRecord> createDecoder(
      SchemaStore resolver) {
    return new BinaryMessageDecoder<NBNAccessControlledRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this ALASensitivityRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a ALASensitivityRecord from a ByteBuffer. */
  public static NBNAccessControlledRecord fromByteBuffer(java.nio.ByteBuffer b)
      throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Pipelines identifier */
  @Deprecated public String id;
  /** The timestamp the record was created */
  @Deprecated public Long created;
  /** Does this record have any access controlled data features */
  @Deprecated public java.lang.Boolean accessControlled;
  /** Description of any generalisations that have been applied */
  @Deprecated public String dataGeneralizations;
  /** Description of any information that has been removed */
  @Deprecated public String informationWithheld;
  /** Coordinate generalisation radius */
  @Deprecated public String publicResolutionInMetres;
  /** The original values that have been altered */
  @Deprecated public java.util.Map<String, String> original;
  /** Values that have been altered to meet sensitivity requirements */
  @Deprecated public java.util.Map<String, String> altered;

  @Deprecated public org.gbif.pipelines.io.avro.IssueRecord issues;

  /**
   * Default constructor. Note that this does not initialize fields to their default values from the
   * schema. If that is desired then one should use <code>newBuilder()</code>.
   */
  public NBNAccessControlledRecord() {}

  /**
   * All-args constructor.
   *
   * @param id Pipelines identifier
   * @param created The timestamp the record was created
   * @param accessControlled Does this record have any access controlled data features
   * @param dataGeneralizations Description of any generalisations that have been applied
   * @param informationWithheld Description of any information that has been removed
   * @param publicResolutionInMetres Coordinate generalisation radius
   * @param original The original values that have been altered
   * @param altered Values that have been altered to meet sensitivity requirements
   * @param issues The new value for issues
   */
  public NBNAccessControlledRecord(
      String id,
      Long created,
      Boolean accessControlled,
      String sensitive,
      String dataGeneralizations,
      String informationWithheld,
      String publicResolutionInMetres,
      java.util.Map<String, String> original,
      java.util.Map<String, String> altered,
      org.gbif.pipelines.io.avro.IssueRecord issues) {
    this.id = id;
    this.created = created;
    this.accessControlled = accessControlled;
    this.dataGeneralizations = dataGeneralizations;
    this.informationWithheld = informationWithheld;
    this.publicResolutionInMetres = publicResolutionInMetres;
    this.original = original;
    this.altered = altered;
    this.issues = issues;
  }

  public org.apache.avro.Schema getSchema() {
    return SCHEMA$;
  }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
      case 0:
        return id;
      case 1:
        return created;
      case 2:
        return accessControlled;
      case 3:
        return dataGeneralizations;
      case 4:
        return informationWithheld;
      case 5:
        return publicResolutionInMetres;
      case 6:
        return original;
      case 7:
        return altered;
      case 8:
        return issues;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value = "unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
      case 0:
        id = (String) value$;
        break;
      case 1:
        created = (Long) value$;
        break;
      case 2:
        accessControlled = (java.lang.Boolean) value$;
        break;
      case 3:
        dataGeneralizations = (String) value$;
        break;
      case 4:
        informationWithheld = (String) value$;
        break;
      case 5:
        publicResolutionInMetres = (String) value$;
        break;
      case 6:
        original = (java.util.Map<String, String>) value$;
        break;
      case 7:
        altered = (java.util.Map<String, String>) value$;
        break;
      case 8:
        issues = (org.gbif.pipelines.io.avro.IssueRecord) value$;
        break;
      default:
        throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   *
   * @return Pipelines identifier
   */
  public String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field. Pipelines identifier
   *
   * @param value the value to set.
   */
  public void setId(String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'created' field.
   *
   * @return The timestamp the record was created
   */
  public Long getCreated() {
    return created;
  }

  /**
   * Sets the value of the 'created' field. The timestamp the record was created
   *
   * @param value the value to set.
   */
  public void setCreated(Long value) {
    this.created = value;
  }

  /**
   * Gets the value of the 'isSensitive' field.
   *
   * @return Does this record have any sensitive data features
   */
  public java.lang.Boolean isAccessControlled() {
    return accessControlled;
  }

  /**
   * Sets the value of the 'isSensitive' field. Does this record have any sensitive data features
   *
   * @param value the value to set.
   */
  public void setAccessControlled(java.lang.Boolean value) {
    this.accessControlled = value;
  }

  /**
   * Gets the value of the 'dataGeneralizations' field.
   *
   * @return Description of any generalisations that have been applied
   */
  public String getDataGeneralizations() {
    return dataGeneralizations;
  }

  /**
   * Sets the value of the 'dataGeneralizations' field. Description of any generalisations that have
   * been applied
   *
   * @param value the value to set.
   */
  public void setDataGeneralizations(String value) {
    this.dataGeneralizations = value;
  }

  /**
   * Gets the value of the 'informationWithheld' field.
   *
   * @return Description of any information that has been removed
   */
  public String getInformationWithheld() {
    return informationWithheld;
  }

  /**
   * Sets the value of the 'informationWithheld' field. Description of any information that has been
   * removed
   *
   * @param value the value to set.
   */
  public void setInformationWithheld(String value) {
    this.informationWithheld = value;
  }

  /**
   * Gets the value of the 'generalisationInMetres' field.
   *
   * @return Coordinate generalisation radius
   */
  public String getPublicResolutionInMetres() {
    return publicResolutionInMetres;
  }

  /**
   * Sets the value of the 'generalisationInMetres' field. Coordinate generalisation radius
   *
   * @param value the value to set.
   */
  public void setPublicResolutionInMetres(String value) {
    this.publicResolutionInMetres = value;
  }

  /**
   * Gets the value of the 'original' field.
   *
   * @return The original values that have been altered
   */
  public java.util.Map<String, String> getOriginal() {
    return original;
  }

  /**
   * Sets the value of the 'original' field. The original values that have been altered
   *
   * @param value the value to set.
   */
  public void setOriginal(java.util.Map<String, String> value) {
    this.original = value;
  }

  /**
   * Gets the value of the 'altered' field.
   *
   * @return Values that have been altered to meet sensitivity requirements
   */
  public java.util.Map<String, String> getAltered() {
    return altered;
  }

  /**
   * Sets the value of the 'altered' field. Values that have been altered to meet sensitivity
   * requirements
   *
   * @param value the value to set.
   */
  public void setAltered(java.util.Map<String, String> value) {
    this.altered = value;
  }

  /**
   * Gets the value of the 'issues' field.
   *
   * @return The value of the 'issues' field.
   */
  @Override
  public org.gbif.pipelines.io.avro.IssueRecord getIssues() {
    return issues;
  }

  /**
   * Sets the value of the 'issues' field.
   *
   * @param value the value to set.
   */
  public void setIssues(org.gbif.pipelines.io.avro.IssueRecord value) {
    this.issues = value;
  }

  /**
   * Creates a new ALASensitivityRecord RecordBuilder.
   *
   * @return A new ALASensitivityRecord RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new ALASensitivityRecord RecordBuilder by copying an existing Builder.
   *
   * @param other The existing builder to copy.
   * @return A new ALASensitivityRecord RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new ALASensitivityRecord RecordBuilder by copying an existing ALASensitivityRecord
   * instance.
   *
   * @param other The existing instance to copy.
   * @return A new ALASensitivityRecord RecordBuilder
   */
  public static Builder newBuilder(NBNAccessControlledRecord other) {
    return new Builder(other);
  }

  /** RecordBuilder for ALASensitivityRecord instances. */
  public static class Builder
      extends org.apache.avro.specific.SpecificRecordBuilderBase<NBNAccessControlledRecord>
      implements org.apache.avro.data.RecordBuilder<NBNAccessControlledRecord> {

    /** Pipelines identifier */
    private String id;
    /** The timestamp the record was created */
    private Long created;
    /** Does this record have any access controlled data features */
    private Boolean accessControlled;
    /** Description of any generalisations that have been applied */
    private String dataGeneralizations;
    /** Description of any information that has been removed */
    private String informationWithheld;
    /** Coordinate generalisation radius */
    private String publicResolutionInMetres;
    /** The original values that have been altered */
    private java.util.Map<String, String> original;
    /** Values that have been altered to meet sensitivity requirements */
    private java.util.Map<String, String> altered;

    private org.gbif.pipelines.io.avro.IssueRecord issues;
    private org.gbif.pipelines.io.avro.IssueRecord.Builder issuesBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     *
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.created)) {
        this.created = data().deepCopy(fields()[1].schema(), other.created);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accessControlled)) {
        this.accessControlled = data().deepCopy(fields()[2].schema(), other.accessControlled);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dataGeneralizations)) {
        this.dataGeneralizations = data().deepCopy(fields()[3].schema(), other.dataGeneralizations);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.informationWithheld)) {
        this.informationWithheld = data().deepCopy(fields()[4].schema(), other.informationWithheld);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.publicResolutionInMetres)) {
        this.publicResolutionInMetres =
            data().deepCopy(fields()[5].schema(), other.publicResolutionInMetres);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.original)) {
        this.original = data().deepCopy(fields()[6].schema(), other.original);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.altered)) {
        this.altered = data().deepCopy(fields()[7].schema(), other.altered);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.issues)) {
        this.issues = data().deepCopy(fields()[8].schema(), other.issues);
        fieldSetFlags()[8] = true;
      }
      if (other.hasIssuesBuilder()) {
        this.issuesBuilder =
            org.gbif.pipelines.io.avro.IssueRecord.newBuilder(other.getIssuesBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing ALASensitivityRecord instance
     *
     * @param other The existing instance to copy.
     */
    private Builder(NBNAccessControlledRecord other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.created)) {
        this.created = data().deepCopy(fields()[1].schema(), other.created);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.accessControlled)) {
        this.accessControlled = data().deepCopy(fields()[2].schema(), other.accessControlled);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dataGeneralizations)) {
        this.dataGeneralizations = data().deepCopy(fields()[3].schema(), other.dataGeneralizations);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.informationWithheld)) {
        this.informationWithheld = data().deepCopy(fields()[4].schema(), other.informationWithheld);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.publicResolutionInMetres)) {
        this.publicResolutionInMetres =
            data().deepCopy(fields()[5].schema(), other.publicResolutionInMetres);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.original)) {
        this.original = data().deepCopy(fields()[6].schema(), other.original);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.altered)) {
        this.altered = data().deepCopy(fields()[7].schema(), other.altered);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.issues)) {
        this.issues = data().deepCopy(fields()[8].schema(), other.issues);
        fieldSetFlags()[8] = true;
      }
      this.issuesBuilder = null;
    }

    /**
     * Gets the value of the 'id' field. Pipelines identifier
     *
     * @return The value.
     */
    public String getId() {
      return id;
    }

    /**
     * Sets the value of the 'id' field. Pipelines identifier
     *
     * @param value The value of 'id'.
     * @return This builder.
     */
    public Builder setId(String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
     * Checks whether the 'id' field has been set. Pipelines identifier
     *
     * @return True if the 'id' field has been set, false otherwise.
     */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }

    /**
     * Clears the value of the 'id' field. Pipelines identifier
     *
     * @return This builder.
     */
    public Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
     * Gets the value of the 'created' field. The timestamp the record was created
     *
     * @return The value.
     */
    public Long getCreated() {
      return created;
    }

    /**
     * Sets the value of the 'created' field. The timestamp the record was created
     *
     * @param value The value of 'created'.
     * @return This builder.
     */
    public Builder setCreated(Long value) {
      validate(fields()[1], value);
      this.created = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
     * Checks whether the 'created' field has been set. The timestamp the record was created
     *
     * @return True if the 'created' field has been set, false otherwise.
     */
    public boolean hasCreated() {
      return fieldSetFlags()[1];
    }

    /**
     * Clears the value of the 'created' field. The timestamp the record was created
     *
     * @return This builder.
     */
    public Builder clearCreated() {
      created = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
     * Gets the value of the 'isSensitive' field. Does this record have any sensitive data features
     *
     * @return The value.
     */
    public java.lang.Boolean isAccessControlled() {
      return accessControlled;
    }

    /**
     * Sets the value of the 'isSensitive' field. Does this record have any sensitive data features
     *
     * @param value The value of 'isSensitive'.
     * @return This builder.
     */
    public Builder setAccessControlled(java.lang.Boolean value) {
      validate(fields()[2], value);
      this.accessControlled = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
     * Checks whether the 'isSensitive' field has been set. Does this record have any sensitive data
     * features
     *
     * @return True if the 'isSensitive' field has been set, false otherwise.
     */
    public boolean hasAccessControlled() {
      return fieldSetFlags()[2];
    }

    /**
     * Clears the value of the 'isSensitive' field. Does this record have any sensitive data
     * features
     *
     * @return This builder.
     */
    public Builder clearAccessControlled() {
      accessControlled = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
     * Gets the value of the 'dataGeneralizations' field. Description of any generalisations that
     * have been applied
     *
     * @return The value.
     */
    public String getDataGeneralizations() {
      return dataGeneralizations;
    }

    /**
     * Sets the value of the 'dataGeneralizations' field. Description of any generalisations that
     * have been applied
     *
     * @param value The value of 'dataGeneralizations'.
     * @return This builder.
     */
    public Builder setDataGeneralizations(String value) {
      validate(fields()[3], value);
      this.dataGeneralizations = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
     * Checks whether the 'dataGeneralizations' field has been set. Description of any
     * generalisations that have been applied
     *
     * @return True if the 'dataGeneralizations' field has been set, false otherwise.
     */
    public boolean hasDataGeneralizations() {
      return fieldSetFlags()[3];
    }

    /**
     * Clears the value of the 'dataGeneralizations' field. Description of any generalisations that
     * have been applied
     *
     * @return This builder.
     */
    public Builder clearDataGeneralizations() {
      dataGeneralizations = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
     * Gets the value of the 'informationWithheld' field. Description of any information that has
     * been removed
     *
     * @return The value.
     */
    public String getInformationWithheld() {
      return informationWithheld;
    }

    /**
     * Sets the value of the 'informationWithheld' field. Description of any information that has
     * been removed
     *
     * @param value The value of 'informationWithheld'.
     * @return This builder.
     */
    public Builder setInformationWithheld(String value) {
      validate(fields()[4], value);
      this.informationWithheld = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
     * Checks whether the 'informationWithheld' field has been set. Description of any information
     * that has been removed
     *
     * @return True if the 'informationWithheld' field has been set, false otherwise.
     */
    public boolean hasInformationWithheld() {
      return fieldSetFlags()[4];
    }

    /**
     * Clears the value of the 'informationWithheld' field. Description of any information that has
     * been removed
     *
     * @return This builder.
     */
    public Builder clearInformationWithheld() {
      informationWithheld = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
     * Gets the value of the 'generalisationInMetres' field. Coordinate generalisation radius
     *
     * @return The value.
     */
    public String getPublicResolutionInMetres() {
      return publicResolutionInMetres;
    }

    /**
     * Sets the value of the 'generalisationInMetres' field. Coordinate generalisation radius
     *
     * @param value The value of 'generalisationInMetres'.
     * @return This builder.
     */
    public Builder setPublicResolutionInMetres(String value) {
      validate(fields()[5], value);
      this.publicResolutionInMetres = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
     * Checks whether the 'generalisationInMetres' field has been set. Coordinate generalisation
     * radius
     *
     * @return True if the 'generalisationInMetres' field has been set, false otherwise.
     */
    public boolean hasPublicResolutionInMetres() {
      return fieldSetFlags()[5];
    }

    /**
     * Clears the value of the 'generalisationInMetres' field. Coordinate generalisation radius
     *
     * @return This builder.
     */
    public Builder clearPublicResolutionInMetres() {
      publicResolutionInMetres = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
     * Gets the value of the 'original' field. The original values that have been altered
     *
     * @return The value.
     */
    public java.util.Map<String, String> getOriginal() {
      return original;
    }

    /**
     * Sets the value of the 'original' field. The original values that have been altered
     *
     * @param value The value of 'original'.
     * @return This builder.
     */
    public Builder setOriginal(java.util.Map<String, String> value) {
      validate(fields()[6], value);
      this.original = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
     * Checks whether the 'original' field has been set. The original values that have been altered
     *
     * @return True if the 'original' field has been set, false otherwise.
     */
    public boolean hasOriginal() {
      return fieldSetFlags()[6];
    }

    /**
     * Clears the value of the 'original' field. The original values that have been altered
     *
     * @return This builder.
     */
    public Builder clearOriginal() {
      original = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
     * Gets the value of the 'altered' field. Values that have been altered to meet sensitivity
     * requirements
     *
     * @return The value.
     */
    public java.util.Map<String, String> getAltered() {
      return altered;
    }

    /**
     * Sets the value of the 'altered' field. Values that have been altered to meet sensitivity
     * requirements
     *
     * @param value The value of 'altered'.
     * @return This builder.
     */
    public Builder setAltered(java.util.Map<String, String> value) {
      validate(fields()[7], value);
      this.altered = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
     * Checks whether the 'altered' field has been set. Values that have been altered to meet
     * sensitivity requirements
     *
     * @return True if the 'altered' field has been set, false otherwise.
     */
    public boolean hasAltered() {
      return fieldSetFlags()[7];
    }

    /**
     * Clears the value of the 'altered' field. Values that have been altered to meet sensitivity
     * requirements
     *
     * @return This builder.
     */
    public Builder clearAltered() {
      altered = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
     * Gets the value of the 'issues' field.
     *
     * @return The value.
     */
    public org.gbif.pipelines.io.avro.IssueRecord getIssues() {
      return issues;
    }

    /**
     * Sets the value of the 'issues' field.
     *
     * @param value The value of 'issues'.
     * @return This builder.
     */
    public Builder setIssues(org.gbif.pipelines.io.avro.IssueRecord value) {
      validate(fields()[8], value);
      this.issuesBuilder = null;
      this.issues = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
     * Checks whether the 'issues' field has been set.
     *
     * @return True if the 'issues' field has been set, false otherwise.
     */
    public boolean hasIssues() {
      return fieldSetFlags()[8];
    }

    /**
     * Gets the Builder instance for the 'issues' field and creates one if it doesn't exist yet.
     *
     * @return This builder.
     */
    public org.gbif.pipelines.io.avro.IssueRecord.Builder getIssuesBuilder() {
      if (issuesBuilder == null) {
        if (hasIssues()) {
          setIssuesBuilder(org.gbif.pipelines.io.avro.IssueRecord.newBuilder(issues));
        } else {
          setIssuesBuilder(org.gbif.pipelines.io.avro.IssueRecord.newBuilder());
        }
      }
      return issuesBuilder;
    }

    /**
     * Sets the Builder instance for the 'issues' field
     *
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setIssuesBuilder(org.gbif.pipelines.io.avro.IssueRecord.Builder value) {
      clearIssues();
      issuesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'issues' field has an active Builder instance
     *
     * @return True if the 'issues' field has an active Builder instance
     */
    public boolean hasIssuesBuilder() {
      return issuesBuilder != null;
    }

    /**
     * Clears the value of the 'issues' field.
     *
     * @return This builder.
     */
    public Builder clearIssues() {
      issues = null;
      issuesBuilder = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public NBNAccessControlledRecord build() {
      try {
        NBNAccessControlledRecord record = new NBNAccessControlledRecord();
        record.id = fieldSetFlags()[0] ? this.id : (String) defaultValue(fields()[0]);
        record.created = fieldSetFlags()[1] ? this.created : (Long) defaultValue(fields()[1]);
        record.accessControlled =
            fieldSetFlags()[2] ? this.accessControlled : (Boolean) defaultValue(fields()[2]);
        record.dataGeneralizations =
            fieldSetFlags()[3] ? this.dataGeneralizations : (String) defaultValue(fields()[3]);
        record.informationWithheld =
            fieldSetFlags()[4] ? this.informationWithheld : (String) defaultValue(fields()[4]);
        record.publicResolutionInMetres =
            fieldSetFlags()[5] ? this.publicResolutionInMetres : (String) defaultValue(fields()[5]);
        record.original =
            fieldSetFlags()[6]
                ? this.original
                : (java.util.Map<String, String>) defaultValue(fields()[6]);
        record.altered =
            fieldSetFlags()[7]
                ? this.altered
                : (java.util.Map<String, String>) defaultValue(fields()[7]);
        if (issuesBuilder != null) {
          record.issues = this.issuesBuilder.build();
        } else {
          record.issues =
              fieldSetFlags()[8]
                  ? this.issues
                  : (org.gbif.pipelines.io.avro.IssueRecord) defaultValue(fields()[8]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<NBNAccessControlledRecord> WRITER$ =
      (org.apache.avro.io.DatumWriter<NBNAccessControlledRecord>) MODEL$.createDatumWriter(SCHEMA$);

  @Override
  public void writeExternal(java.io.ObjectOutput out) throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<NBNAccessControlledRecord> READER$ =
      (org.apache.avro.io.DatumReader<NBNAccessControlledRecord>) MODEL$.createDatumReader(SCHEMA$);

  @Override
  public void readExternal(java.io.ObjectInput in) throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }
}
