package org.gbif.pipelines.maven;

/** Simplification for template loading from resources */
public class Templates {

  public static final String TABLE_CONVERTER =
      "package ${packagePath};\n"
          + "\n"
          + "import java.util.Optional;\n"
          + "import java.util.function.Function;\n"
          + "\n"
          + "import org.gbif.pipelines.core.interpreters.ExtensionInterpretation;\n"
          + "import org.gbif.pipelines.core.interpreters.ExtensionInterpretation.TargetHandler;\n"
          + "import org.gbif.pipelines.core.pojo.ErIdrMdrContainer;\n"
          + "import ${namespace}.ExtendedRecord;\n"
          + "import ${namespace}.${extensionPackage}.${tableName};\n"
          + "\n"
          + "import lombok.AccessLevel;\n"
          + "import lombok.NoArgsConstructor;\n"
          + "\n"
          + "/**\n"
          + " * Autogenerated by extension-converter-maven-plugin. DO NOT EDIT DIRECTLY\n"
          + " * Converts/maps form {@link ExtendedRecord} to {@link ${tableName}}.\n"
          + " */\n"
          + "@NoArgsConstructor(access = AccessLevel.PRIVATE)\n"
          + "public class ${tableName}Converter {\n"
          + "\n"
          + "  private static final Function<${tableName}, TargetHandler<${tableName}>>\n"
          + "      VERBATIM_HANDLER =\n"
          + "          mft ->\n"
          + "              ExtensionInterpretation.extension(\"${rowType}\")\n"
          + "                  .to(() -> mft)\n"
          + "                  // Verbatim\n"
          + "              <#list setters as setter>\n"
          + "                  .map(\"${setter.qualifier}\", ${tableName}::set${setter.vName})\n"
          + "              </#list>;\n"
          + "\n"
          + "  private static final Function<${tableName}, TargetHandler<${tableName}>>\n"
          + "      INTERPRETED_HANDLER =\n"
          + "          mft ->\n"
          + "              ExtensionInterpretation.extension(\"${rowType}\")\n"
          + "                  .to(() -> mft)\n"
          + "                  // Interpreted\n"
          + "              <#list setters as setter>\n"
          + "                  .map(\"${setter.qualifier}\", ${tableName}::set${setter.name})\n"
          + "              </#list>;\n"
          + "\n"
          + "  /**\n"
          + "   * Converts an extension of a {@link ExtendedRecord} and populates a {@link\n"
          + "   * ${tableName}} with verbatim and interpreted values.\n"
          + "   */\n"
          + "  public static Optional<${tableName}> convert(ErIdrMdrContainer c) {\n"
          + "    if (c.getEr() == null || c.getIdr() == null || c.getMdr() == null) {\n"
          + "      return Optional.empty();\n"
          + "    }\n"
          + "    ${tableName} table =\n"
          + "        ${tableName}.newBuilder()\n"
          + "        .setGbifid(Optional.ofNullable(c.getIdr().getInternalId()).map(Object::toString).orElse(c.getIdr().getId()))\n"
          + "        .setDatasetkey(c.getMdr().getDatasetKey())\n"
          + "        .build();\n"
          + "\n"
          + "    return VERBATIM_HANDLER\n"
          + "        .apply(table)\n"
          + "        .convert(c.getEr())\n"
          + "        .get()\n"
          + "        .flatMap(x -> INTERPRETED_HANDLER.apply(x).convert(c.getEr()).get());\n"
          + "  }\n"
          + "}\n";

  private Templates() {}
}
