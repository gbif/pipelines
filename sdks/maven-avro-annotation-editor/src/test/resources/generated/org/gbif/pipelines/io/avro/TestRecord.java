/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.gbif.pipelines.io.avro;

import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
/** FOr unit test */
@org.apache.avro.specific.AvroGenerated
public class TestRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -1233200557636741636L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestRecord\",\"namespace\":\"org.gbif.pipelines.io.avro\",\"doc\":\"FOr unit test\",\"fields\":[{\"name\":\"id\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"doc\":\"Pipelines identifier\"},{\"name\":\"issues\",\"type\":{\"type\":\"record\",\"name\":\"IssueRecord\",\"doc\":\"Issue information\",\"fields\":[{\"name\":\"issueList\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},\"default\":[]}]},\"default\":{}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TestRecord> ENCODER =
      new BinaryMessageEncoder<TestRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TestRecord> DECODER =
      new BinaryMessageDecoder<TestRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<TestRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<TestRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TestRecord>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this TestRecord to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a TestRecord from a ByteBuffer. */
  public static TestRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Pipelines identifier */
  @Deprecated public String id;
  @Deprecated public org.gbif.pipelines.io.avro.IssueRecord issues;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TestRecord() {}

  /**
   * All-args constructor.
   * @param id Pipelines identifier
   * @param issues The new value for issues
   */
  public TestRecord(String id, org.gbif.pipelines.io.avro.IssueRecord issues) {
    this.id = id;
    this.issues = issues;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public Object get(int field$) {
    switch (field$) {
    case 0: return id;
    case 1: return issues;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, Object value$) {
    switch (field$) {
    case 0: id = (String)value$; break;
    case 1: issues = (org.gbif.pipelines.io.avro.IssueRecord)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'id' field.
   * @return Pipelines identifier
   */
  public String getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * Pipelines identifier
   * @param value the value to set.
   */
  public void setId(String value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'issues' field.
   * @return The value of the 'issues' field.
   */
  public org.gbif.pipelines.io.avro.IssueRecord getIssues() {
    return issues;
  }

  /**
   * Sets the value of the 'issues' field.
   * @param value the value to set.
   */
  public void setIssues(org.gbif.pipelines.io.avro.IssueRecord value) {
    this.issues = value;
  }

  /**
   * Creates a new TestRecord RecordBuilder.
   * @return A new TestRecord RecordBuilder
   */
  public static Builder newBuilder() {
    return new Builder();
  }

  /**
   * Creates a new TestRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TestRecord RecordBuilder
   */
  public static Builder newBuilder(Builder other) {
    return new Builder(other);
  }

  /**
   * Creates a new TestRecord RecordBuilder by copying an existing TestRecord instance.
   * @param other The existing instance to copy.
   * @return A new TestRecord RecordBuilder
   */
  public static Builder newBuilder(TestRecord other) {
    return new Builder(other);
  }

  /**
   * RecordBuilder for TestRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestRecord>
    implements org.apache.avro.data.RecordBuilder<TestRecord> {

    /** Pipelines identifier */
    private String id;
    private org.gbif.pipelines.io.avro.IssueRecord issues;
    private org.gbif.pipelines.io.avro.IssueRecord.Builder issuesBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.issues)) {
        this.issues = data().deepCopy(fields()[1].schema(), other.issues);
        fieldSetFlags()[1] = true;
      }
      if (other.hasIssuesBuilder()) {
        this.issuesBuilder = org.gbif.pipelines.io.avro.IssueRecord.newBuilder(other.getIssuesBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing TestRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(TestRecord other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.id)) {
        this.id = data().deepCopy(fields()[0].schema(), other.id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.issues)) {
        this.issues = data().deepCopy(fields()[1].schema(), other.issues);
        fieldSetFlags()[1] = true;
      }
      this.issuesBuilder = null;
    }

    /**
      * Gets the value of the 'id' field.
      * Pipelines identifier
      * @return The value.
      */
    public String getId() {
      return id;
    }

    /**
      * Sets the value of the 'id' field.
      * Pipelines identifier
      * @param value The value of 'id'.
      * @return This builder.
      */
    public Builder setId(String value) {
      validate(fields()[0], value);
      this.id = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'id' field has been set.
      * Pipelines identifier
      * @return True if the 'id' field has been set, false otherwise.
      */
    public boolean hasId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'id' field.
      * Pipelines identifier
      * @return This builder.
      */
    public Builder clearId() {
      id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'issues' field.
      * @return The value.
      */
    public org.gbif.pipelines.io.avro.IssueRecord getIssues() {
      return issues;
    }

    /**
      * Sets the value of the 'issues' field.
      * @param value The value of 'issues'.
      * @return This builder.
      */
    public Builder setIssues(org.gbif.pipelines.io.avro.IssueRecord value) {
      validate(fields()[1], value);
      this.issuesBuilder = null;
      this.issues = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'issues' field has been set.
      * @return True if the 'issues' field has been set, false otherwise.
      */
    public boolean hasIssues() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'issues' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.gbif.pipelines.io.avro.IssueRecord.Builder getIssuesBuilder() {
      if (issuesBuilder == null) {
        if (hasIssues()) {
          setIssuesBuilder(org.gbif.pipelines.io.avro.IssueRecord.newBuilder(issues));
        } else {
          setIssuesBuilder(org.gbif.pipelines.io.avro.IssueRecord.newBuilder());
        }
      }
      return issuesBuilder;
    }

    /**
     * Sets the Builder instance for the 'issues' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */
    public Builder setIssuesBuilder(org.gbif.pipelines.io.avro.IssueRecord.Builder value) {
      clearIssues();
      issuesBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'issues' field has an active Builder instance
     * @return True if the 'issues' field has an active Builder instance
     */
    public boolean hasIssuesBuilder() {
      return issuesBuilder != null;
    }

    /**
      * Clears the value of the 'issues' field.
      * @return This builder.
      */
    public Builder clearIssues() {
      issues = null;
      issuesBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TestRecord build() {
      try {
        TestRecord record = new TestRecord();
        record.id = fieldSetFlags()[0] ? this.id : (String) defaultValue(fields()[0]);
        if (issuesBuilder != null) {
          record.issues = this.issuesBuilder.build();
        } else {
          record.issues = fieldSetFlags()[1] ? this.issues : (org.gbif.pipelines.io.avro.IssueRecord) defaultValue(fields()[1]);
        }
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TestRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<TestRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TestRecord>
    READER$ = (org.apache.avro.io.DatumReader<TestRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
